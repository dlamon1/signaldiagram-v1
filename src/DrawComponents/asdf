<script>
  import {
    signalLines as signalLinesClass,
    snapPoints as snapPointsClass,
    panels as panelsClass,
    svgRef,
    isDrawingSignalLine,
    gZoomWrapperRef,
    panelWrappersRef,
    mode,
    topLevelSvgRef,
  } from "../store";

  let oldPanelLength;
  let panelWrappersData = null;
  let init = false;

  // console.log($topLevelSvgRef);

  $: {
    let t = [$panelsClass];

    drawPanelWrappers();
  }

  const handlePanelClassUpdate = () => {
    if (!$gZoomWrapperRef) return;

    console.log(wrappers);

    // First render
    if (oldPanelLength === $panelsClass.array.length) {
      console.log("same length");
      updatePanelWrappers();
      oldPanelLength = $panelsClass.array.length;
      return;
    }
    console.log("init");

    initPanelWrappers();

    // // Length did not change, update
    // if ($panelsClass.array.length === oldPanelLength) {
    //   console.log("update");
    //   oldPanelLength = $panelsClass.array.length;

    //   updatePanelWrappers();
    //   return;
    // }

    // // Panels added
    // if ($panelsClass.array.length > oldPanelLength) {
    //   console.log("add");
    //   oldPanelLength = $panelsClass.array.length;

    //   // updatePanelWrappers();
    //   addPanelWrappers();
    //   return;
    // }

    // // Panels removed
    // if ($panelsClass.array.length < oldPanelLength) {
    //   console.log("remove");
    //   oldPanelLength = $panelsClass.array.length;

    //   removePanelWrappers();
    //   return;
    // }
  };

  let wrappers;

  const drawPanelWrappers = () => {
    init = true;
    wrappers = $gZoomWrapperRef
      .selectAll("svg")
      .data($panelsClass.array, (d) => d.i);

    wrappers
      .transition()
      .attr("x", (d) => d.x)
      .attr("y", (d) => d.y)
      .attr("width", (d) => d.width)
      .attr("height", (d) => d.height);

    wrappers
      .exit()
      .transition()
      .duration(50)
      .attr("width", (d) => {
        console.log(d);
        return 0;
      })
      .attr("height", 0)
      .remove();

    wrappers
      .enter()
      .append("svg")
      .attr("id", (d) => "panel-group" + d.i)
      .attr("x", (d) => d.x)
      .attr("y", (d) => d.y)
      .attr("width", (d) => d.width)
      .attr("height", (d) => d.height)
      .style("point-events", $isDrawingSignalLine && "none")
      // add a debug rectange
      .append("rect")
      .attr("id", (d) => "panel-rectangle" + d.i)
      .attr("width", (d) => {
        return d.width;
      })
      .attr("height", (d) => d.height)
      .attr("fill", (d) => d.color.background)
      .attr("stroke", (d) => d.color.border)
      .attr("stroke-width", (d) => d.lineWidth)
      .style("point-events", $isDrawingSignalLine && "none");
    // .merge(wrappers)
    // .transition()
    // .duration(1000)
    // .delay(10)
    // .attr("x", (d) => d.x)
    // .attr("y", (d) => d.y)
    // .attr("width", (d) => d.width)
    // .attr("height", (d) => d.height);
  };

  const updatePanelWrappers = () => {
    panelWrappersData
      .data($panelsClass.array)
      .transition()
      .attr("fill", (d) => d.color.background)
      .attr("stroke", (d) => d.color.border);

    // .attr("id", (d) => "panel-group" + d.i)
    // .attr("x", (d) => d.x)
    // .attr("y", (d) => d.y)
    // .attr("width", (d) => d.width)
    // .attr("height", (d) => d.height)
    // .style("point-events", $isDrawingSignalLine && "none");
    // console.log($panelWrappersRef);
  };

  const addPanelWrappers = () => {
    wrappers = $gZoomWrapperRef.selectAll("svg").data($panelsClass.array);

    wrappers
      .exit()
      .transition()
      .duration(0)
      .attr("width", (d) => {
        console.log(d);
        return 0;
      })
      .attr("height", 0)
      .remove();
  };

  const removePanelWrappers = () => {
    wrappers = $gZoomWrapperRef.selectAll("svg").data($panelsClass.array);

    wrappers
      .exit()
      .transition()
      .duration(0)
      .attr("width", (d) => {
        console.log(d);
        return 0;
      })
      .attr("height", 0)
      .remove();
  };
</script>
